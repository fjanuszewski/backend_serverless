AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Document Management Security

Parameters:
  Environment:
    Type: String
  Project:
    Type: String
  Bucket:
    Type: String
    Default: demoandreani

Resources:
  RolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:GetObject*"
              - "s3:PutObject*"
            Resource: 
              Fn::Sub: "arn:aws:s3:::${Bucket}/*"
          -
            Effect: "Allow"
            Action:
              - "lambda:InvokeFunction"
              - "lambda:InvokeAsync"
              - "lambda:GetFunction"
            Resource:
              - Fn::Join: ["", ["arn:aws:lambda:*:*:function:",Ref: Environment, "*"]]
      ManagedPolicyName: 
        Fn::Join: ["-", [Ref: Environment, Ref: Project, "RolePolicy"]]  

  Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "states.amazonaws.com"
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - Ref: RolePolicy
      RoleName: 
        Fn::Join: ["-", [Ref: Environment, Ref: Project, "Role"]]

Outputs:
  Rol:
    Description: Role for Document Management
    Value: 
      Fn::GetAtt: Role.Arn
    Export:
      Name: 
        Fn::Join: ["-", [Ref: Environment, Ref: Project, "Role"]]          