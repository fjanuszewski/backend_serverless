AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Demo serverless CRUD

Parameters:
  Environment:
    Type: String
  Project:
    Type: String

Globals:
  Function:
    Runtime: nodejs14.x
    Handler: app.handler
    Timeout: 30
    MemorySize: 128

Resources:
  CommonsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName:
        Fn::Sub: ${AWS::StackName}-CommonsLayer
      Description: "Commons Libs"
      ContentUri: ./layers/commons
      LicenseInfo: Available under the MIT-0 license.
      CompatibleRuntimes:
        - nodejs14.x
    Metadata:
      BuildMethod: nodejs14.x

  SampleApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: 
        Fn::Sub: ${AWS::StackName}-ApiGateway
      StageName: 
        Ref: Environment
      Variables:
        Environment: 
          Ref: Environment
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./swagger.yaml
            
  GetItem:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs14.x
      Handler: app.handler
      Timeout: 30
      MemorySize: 128
      AutoPublishAlias: live
      CodeUri: ./functions/getItem
      FunctionName: 
        Fn::Sub: ${AWS::StackName}-GetItem      
      Layers:
        - Ref: CommonsLayer
      Environment:
        Variables:
          ENV: 
            Ref: Environment
          EXAMPLE_TABLE: 
            Ref: ExampleTable
      Policies:
        - AWSLambdaExecute
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:GetItem"
              Resource:
                Fn::GetAtt: ExampleTable.Arn
      Events:
        HttpEvent:
          Type: HttpApi 
          Properties:
            Path: /items/{idItem}
            Method: GET
            ApiId:
              Ref: SampleApi
  ##OLD MODEL FOR INTEGRATION
  # GetItemLambdaPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName:
  #       Ref: GetItem
  #     Principal: apigateway.amazonaws.com
  #     SourceArn:
  #       Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SampleApi}/*/GET/items/{idItem}


  PutItem:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/PutItem
      FunctionName: 
        Fn::Sub: ${AWS::StackName}-PutItem
      Environment:
        Variables:
          ENV: 
            Ref: Environment
          EXAMPLE_TABLE: 
            Ref: ExampleTable
      Policies:
        - AWSLambdaExecute
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:UpdateItem"
              Resource:
                Fn::GetAtt: ExampleTable.Arn
      Events:
        HttpEvent:
          Type: HttpApi 
          Properties:
            Path: /items/{idItem}
            Method: PUT
            ApiId:
              Ref: SampleApi

  PostItem:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/postItem
      FunctionName: 
        Fn::Sub: ${AWS::StackName}-PostItem
      Environment:
        Variables:
          ENV: 
            Ref: Environment
          EXAMPLE_TABLE: 
            Ref: ExampleTable
      Policies:
        - AWSLambdaExecute
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:PutItem"
              Resource:
                Fn::GetAtt: ExampleTable.Arn
      Events:
        HttpEvent:
          Type: HttpApi 
          Properties:
            Path: /items/
            Method: POST
            ApiId:
              Ref: SampleApi

  DeleteItem:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/deleteItem
      FunctionName: 
        Fn::Sub: ${AWS::StackName}-DeleteItem
      Environment:
        Variables:
          ENV: 
            Ref: Environment
          EXAMPLE_TABLE: 
            Ref: ExampleTable
      Policies:
        - AWSLambdaExecute
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:DeleteItem"
              Resource:
                Fn::GetAtt: ExampleTable.Arn
      Events:
        HttpEvent:
          Type: HttpApi 
          Properties:
            Path: /items/{idItem}
            Method: DELETE
            ApiId:
              Ref: SampleApi

  ExampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-ExampleTable
      PrimaryKey:
        Name: idItem
        Type: String
      # ProvisionedThroughput: #Add this if you need Provisioned
      #   ReadCapacityUnits: 2
      #   WriteCapacityUnits: 2

  ApiKeysTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-ApiKeysTable
      PrimaryKey:
        Name: key
        Type: String
      # ProvisionedThroughput: #Add this if you need Provisioned
      #   ReadCapacityUnits: 2
      #   WriteCapacityUnits: 2


  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/authorizer
      FunctionName: 
        Fn::Sub: ${AWS::StackName}-Authorizer
      Environment:
        Variables:
          ENV:
            Ref: Environment
          KEYS_TABLE:
            Ref: ApiKeysTable
      Policies:
        - AWSLambdaExecute
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:Gettem"
              Resource:
                Fn::GetAtt: ApiKeysTable.Arn
Outputs:
  ProdDataEndpoint:
    Description: "API Prod stage endpoint"
    Value:
      Fn::Sub: "https://${SampleApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"